{"version":3,"sources":["pages/dashboard/BusinessAddressUpdate.jsx"],"names":["BusinessAddressUpdate","useState","libraries","businessData","setBusinessData","axiosPrivate","useAxiosPrivate","navigate","useNavigate","enqueueSnackbar","useSnackbar","state","useLocation","autoComplete","setAutoComplete","addressMapData","setAddressMapData","location","lattitudeData","setLattitudeData","longitudeData","setLongitudeData","useEffect","businessAddressData","setFieldValue","businessName","userName","email","mobile","businessLocationName","description","physicalAddress","completedSchema","Yup","shape","name","min","max","required","formik","useFormik","initialValues","user_name","validationSchema","onSubmit","values","resetForm","setFieldError","setSubmitting","informationObj","id","_id","businessId","userId","longitude","coordinates","latitude","includes","businessAddressUpdate","useMutation","data","patch","BUSINESS_API_URL","updateBusinessAddress","JSON","stringify","onSuccess","variant","anchorOrigin","vertical","horizontal","autoHideDuration","PATH_DASHBOARD","general","users","onError","error","errorData","response","errors","message","Object","keys","forEach","key","mutateAsync","touched","handleSubmit","getFieldProps","value","noValidate","className","label","varient","fullWidth","Boolean","helperText","customeName","component","PhoneInputs","type","googleMapsApiKey","process","onLoad","inputAutoComplete","onPlaceChanged","place","getPlace","lat","geometry","lng","address","vicinity","onChange","event","target"],"mappings":"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","file":"static/js/46.0436fe5b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport * as Yup from \"yup\";\r\nimport { Button, TextField } from '@mui/material';\r\nimport { Field, Form, FormikProvider, useFormik } from \"formik\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport useAxiosPrivate from \"src/hooks/useAxiosPrivate\";\r\nimport { BUSINESS_API_URL } from \"src/api/axios\";\r\nimport { useMutation } from 'react-query';\r\nimport { useSnackbar } from \"notistack\";\r\nimport PhoneInputs from './input/PhoneInputs';\r\nimport { useNavigate } from \"react-router\";\r\nimport { PATH_DASHBOARD } from 'src/routes/paths';\r\nimport { Autocomplete, LoadScript } from \"@react-google-maps/api\";\r\n\r\nconst BusinessAddressUpdate = () => {\r\n    const googleMapKey = process.env.REACT_APP_GOOGLE_MAP_LEY;\r\n    const [libraries] = useState([\"places\"]);\r\n    const [businessData, setBusinessData] = useState();\r\n    const axiosPrivate = useAxiosPrivate();\r\n    const navigate = useNavigate();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const { state } = useLocation();\r\n    const [autoComplete, setAutoComplete] = useState();\r\n    const [addressMapData, setAddressMapData] = useState();\r\n    const [location, setLocation] = useState({});\r\n    const [lattitudeData, setLattitudeData] = useState();\r\n    const [longitudeData, setLongitudeData] = useState();\r\n\r\n    useEffect(() => {\r\n        setBusinessData(state?.businessAddressData)\r\n    }, [state])\r\n\r\n    useEffect(() => {\r\n        if (businessData) {\r\n            setFieldValue(\"name\", businessData?.businessName ? businessData?.businessName : \"\");\r\n            setFieldValue(\"user_name\", businessData?.userName ? businessData?.userName : \"\");\r\n            setFieldValue(\"email\", businessData?.email ? businessData?.email : \"\");\r\n            setFieldValue(\"mobile\", businessData?.mobile ? businessData?.mobile : \"\");\r\n            setFieldValue(\"businessLocationName\", businessData?.businessLocationName ? businessData?.businessLocationName : \"\");\r\n            setFieldValue(\"description\", businessData?.description ? businessData?.description : \"\");\r\n            setFieldValue(\"physicalAddress\", businessData?.physicalAddress ? businessData?.physicalAddress : \"\");\r\n            setAddressMapData(businessData?.physicalAddress ? businessData?.physicalAddress : \"\")\r\n        }\r\n    }, [businessData])\r\n\r\n    const completedSchema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .min(2, \"business name can set of between 2 and 50 characters!\")\r\n            .max(50, \"business name can set of between 2 and 50 characters!\")\r\n            .required(\"business name is required\"),\r\n        description: Yup.string()\r\n            .min(2, \"user description can set of between 2 and 255 characters!\")\r\n            .max(255, \"user description can set of between 2 and 255 characters!\")\r\n            .required(\"user description is required\"),\r\n        physicalAddress: Yup.string()\r\n            .min(2, \"physical address can set of between 2 and 255 characters!\")\r\n            .max(255, \"physical address can set of between 2 and 255 characters!\")\r\n            .required(\"physical address is required\"),\r\n        businessLocationName: Yup.string()\r\n            .min(2, \"business location name can set of between 2 and 255 characters!\")\r\n            .max(255, \"business location name can set of between 2 and 255 characters!\")\r\n            .required(\"business location name is required\"),\r\n        email: Yup.string()\r\n            .email(\"email must be a valid email address\")\r\n            .required(\"email is required\"),\r\n        mobile: Yup.string()\r\n            .min(11, \"enter valid mobile number\")\r\n            .max(14, \"enter valid mobile number\")\r\n            .required(\"mobile is required\"),\r\n    });\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: businessData?.businessName ? businessData?.businessName : \"\",\r\n            user_name: businessData?.userName ? businessData?.userName : \"\",\r\n            email: businessData?.email ? businessData?.email : \"\",\r\n            mobile: businessData?.mobile ? businessData?.mobile : \"\",\r\n            businessLocationName: businessData?.businessLocationName ? businessData?.businessLocationName : \"\",\r\n            description: businessData?.description ? businessData?.description : \"\",\r\n            physicalAddress: businessData?.physicalAddress ? businessData?.physicalAddress : \"\",\r\n\r\n        },\r\n        validationSchema: completedSchema,\r\n        onSubmit: async (values, { resetForm, setFieldError, setSubmitting }) => {\r\n            const informationObj = {\r\n                id: businessData?._id,\r\n                businessId: businessData?.businessId,\r\n                userId: businessData?.userId,\r\n                description: values.description,\r\n                businessName: values.name,\r\n                physicalAddress: values.physicalAddress,\r\n                longitude: longitudeData ? longitudeData : businessData?.location?.coordinates[0],\r\n                latitude: lattitudeData ? lattitudeData : businessData?.location?.coordinates[1],\r\n                email: values.email,\r\n                mobile: values.mobile ? values.mobile.includes(\"+\") ? values.mobile : \"+\" + values.mobile : businessData?.mobile,\r\n                businessLocationName: values.businessLocationName\r\n            };\r\n            await businessAddressUpdate(informationObj);\r\n            setSubmitting(false);\r\n        },\r\n    });\r\n\r\n    const { mutateAsync: businessAddressUpdate } = useMutation(\r\n        async (data) => {\r\n            return await axiosPrivate.patch(BUSINESS_API_URL.updateBusinessAddress, JSON.stringify(data))\r\n        },\r\n        {\r\n            onSuccess: ({ data }) => {\r\n                enqueueSnackbar(\"business address update successfully\", {\r\n                    variant: \"success\",\r\n                    anchorOrigin: { vertical: \"top\", horizontal: \"right\" },\r\n                    autoHideDuration: 2000,\r\n                });\r\n                navigate(PATH_DASHBOARD.general.users);\r\n            },\r\n            onError: (error) => {\r\n                const errorData = error.response.data.errors;\r\n                if (error.response?.data?.message) {\r\n                    enqueueSnackbar(error.response?.data?.message, {\r\n                        variant: \"error\",\r\n                        anchorOrigin: { vertical: \"top\", horizontal: \"right\" },\r\n                        autoHideDuration: 2000,\r\n                    });\r\n                }\r\n                Object.keys(errorData).forEach((key) => {\r\n\r\n                    if (key === \"description\") {\r\n                        setFieldError(\"description\", errorData[key]);\r\n                    } else if (key === \"address.name\") {\r\n                        setFieldError(\"address\", errorData[key]);\r\n                    } else if (key === \"secondary\") {\r\n                        setFieldError(\"secondaryNumber\", errorData[key]);\r\n                    } else if (key === \"alternative\") {\r\n                        setFieldError(\"alternativeNumber\", errorData[key]);\r\n                    } else if (key === \"name\") {\r\n                        setFieldError(\"user_name\", errorData[key]);\r\n                    } else {\r\n                        setFieldError(key, errorData[key]);\r\n                    }\r\n                });\r\n            },\r\n        }\r\n    );\r\n\r\n    const { errors, touched, setFieldValue, handleSubmit, setFieldError, getFieldProps } = formik;\r\n    const onAutoCompleteIsLoad = (inputAutoComplete) => {\r\n        setAutoComplete(inputAutoComplete);\r\n    };\r\n    const handleChange = (event) => {\r\n        setAddressMapData(event.target.value);\r\n    };\r\n    const onAutoCompletePlaceIsChanged = () => {\r\n        if (autoComplete !== null) {\r\n            var place = autoComplete.getPlace();\r\n            location.lat = place.geometry.location.lat();\r\n            location.lng = place.geometry.location.lng();\r\n            location.address = place.vicinity;\r\n            setFieldValue(\"physicalAddress\", place.vicinity);\r\n            setAddressMapData(place.vicinity);\r\n            setLongitudeData(location.lng);\r\n            setLattitudeData(location.lat);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormikProvider value={formik}>\r\n                <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className='col'>\r\n                                <div className='user_edit_header'>\r\n                                    <h4 className=\"app_text_14_semibold mb-0\">update business address</h4>\r\n                                </div>\r\n\r\n                                <div className=\"d-flex mt-4\">\r\n                                    <TextField\r\n                                        label=\"name\"\r\n                                        varient=\"outlined\"\r\n                                        fullWidth\r\n                                        autoComplete=\"off\"\r\n                                        {...getFieldProps(\"name\")}\r\n                                        error={Boolean(touched.name && errors.name)}\r\n                                        helperText={touched.name && errors.name}\r\n                                    />\r\n                                </div>\r\n                                <div className='d-flex row mt-4'>\r\n                                    <div className='col'>\r\n                                        <Field\r\n                                            customeName=\"mobile\"\r\n                                            name=\"mobile\"\r\n                                            label=\"mobile number\"\r\n                                            errors={errors.mobile}\r\n                                            component={PhoneInputs}\r\n                                            data={businessData?.mobile ? businessData?.mobile : \"\"}\r\n                                        />\r\n                                    </div>\r\n                                    <div className='col'>\r\n                                        <TextField\r\n                                            label='email'\r\n                                            type='email'\r\n                                            autoComplete='off'\r\n                                            fullWidth\r\n                                            variant='outlined'\r\n                                            {...getFieldProps(\"email\")}\r\n                                            error={Boolean(touched.email && errors.email)}\r\n                                            helperText={touched.email && errors.email}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className='d-flex row mt-4'>\r\n                                    <div className='col'>\r\n                                        <TextField\r\n                                            label='location name'\r\n                                            type='text'\r\n                                            autoComplete='off'\r\n                                            fullWidth\r\n                                            variant='outlined'\r\n                                            {...getFieldProps(\"businessLocationName\")}\r\n                                            error={Boolean(touched.businessLocationName && errors.businessLocationName)}\r\n                                            helperText={touched.businessLocationName && errors.businessLocationName}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"d-flex mt-4\">\r\n                                    <TextField\r\n                                        label=\"description\"\r\n                                        varient=\"outlined\"\r\n                                        fullWidth\r\n                                        autoComplete=\"off\"\r\n                                        {...getFieldProps(\"description\")}\r\n                                        error={Boolean(touched.description && errors.description)}\r\n                                        helperText={touched.description && errors.description}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"d-flex mt-4\">\r\n                                    <LoadScript googleMapsApiKey={googleMapKey} libraries={libraries}>\r\n                                        <Autocomplete\r\n                                            className='w-100'\r\n                                            onLoad={onAutoCompleteIsLoad}\r\n                                            onPlaceChanged={onAutoCompletePlaceIsChanged}\r\n                                        >\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                value={addressMapData}\r\n                                                onChange={handleChange}\r\n                                                variant=\"outlined\"\r\n                                                label=\"physical address\"\r\n                                                {...getFieldProps(\"physicalAddress\")}\r\n                                                error={Boolean(touched.physicalAddress && errors.physicalAddress)}\r\n                                                helperText={touched.physicalAddress && errors.physicalAddress}\r\n                                            />\r\n                                        </Autocomplete>\r\n                                    </LoadScript>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <br></br>\r\n                        <div className=\"col\">\r\n                            <div className=\"col-md-8 m-auto\">\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    className=\"my-3 text-lowercase text-white app_bg_primary app_text_16_semibold app_btn_lg\"\r\n                                >\r\n                                    update business address\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            </FormikProvider></>\r\n    )\r\n}\r\n\r\nexport default BusinessAddressUpdate"],"sourceRoot":""}