{"version":3,"sources":["pages/dashboard/BusinessAddressAdd.jsx"],"names":["BusinessAddressAdd","useState","libraries","UserId","setUserId","BusinessId","setBusinessId","axiosPrivate","useAxiosPrivate","navigate","useNavigate","enqueueSnackbar","useSnackbar","state","useLocation","autoComplete","setAutoComplete","addressMapData","setAddressMapData","location","lattitudeData","setLattitudeData","longitudeData","setLongitudeData","useEffect","data","userId","businessId","completedSchema","Yup","shape","name","min","max","required","description","physicalAddress","businessLocationName","email","mobile","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","setFieldError","setSubmitting","informationObj","businessName","longitude","latitude","addAddress","useMutation","post","BUSINESS_API_URL","addBusinessAddress","JSON","stringify","onSuccess","variant","anchorOrigin","vertical","horizontal","autoHideDuration","PATH_DASHBOARD","general","users","onError","error","errorData","response","errors","message","Object","keys","forEach","key","mutateAsync","touched","setFieldValue","handleSubmit","getFieldProps","value","noValidate","className","label","varient","fullWidth","Boolean","helperText","customeName","component","PhoneInputs","type","googleMapsApiKey","process","onLoad","inputAutoComplete","onPlaceChanged","place","getPlace","lat","geometry","lng","address","vicinity","defaultValue","onChange","event","target"],"mappings":"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","file":"static/js/45.b6b28faa.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport * as Yup from \"yup\";\r\nimport { Button, TextField } from '@mui/material';\r\nimport { Field, Form, FormikProvider, useFormik } from \"formik\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport useAxiosPrivate from \"src/hooks/useAxiosPrivate\";\r\nimport { BUSINESS_API_URL } from \"src/api/axios\";\r\nimport { useMutation } from 'react-query';\r\nimport { useSnackbar } from \"notistack\";\r\nimport PhoneInputs from './input/PhoneInputs';\r\nimport { useNavigate } from \"react-router\";\r\nimport { PATH_DASHBOARD } from 'src/routes/paths';\r\nimport { Autocomplete, LoadScript } from \"@react-google-maps/api\";\r\n\r\nconst BusinessAddressAdd = () => {\r\n    const googleMapKey = process.env.REACT_APP_GOOGLE_MAP_LEY;\r\n    const [libraries] = useState([\"places\"]);\r\n    const [UserId, setUserId] = useState(\"\");\r\n    const [BusinessId, setBusinessId] = useState(\"\");\r\n    const axiosPrivate = useAxiosPrivate();\r\n    const navigate = useNavigate();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const { state } = useLocation();\r\n    const [autoComplete, setAutoComplete] = useState();\r\n    const [addressMapData, setAddressMapData] = useState(\"\");\r\n    const [location, setLocation] = useState({});\r\n    const [lattitudeData, setLattitudeData] = useState();\r\n    const [longitudeData, setLongitudeData] = useState();\r\n\r\n    useEffect(() => {\r\n        setUserId(state?.data?.userId)\r\n        setBusinessId(state?.data?.businessId)\r\n    }, [state])\r\n\r\n    const completedSchema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .min(2, \"business name can set of between 2 and 50 characters!\")\r\n            .max(50, \"business name can set of between 2 and 50 characters!\")\r\n            .required(\"business name is required\"),\r\n        description: Yup.string()\r\n            .min(2, \"user description can set of between 2 and 255 characters!\")\r\n            .max(255, \"user description can set of between 2 and 255 characters!\")\r\n            .required(\"user description is required\"),\r\n        physicalAddress: Yup.string()\r\n            .min(2, \"physical address can set of between 2 and 255 characters!\")\r\n            .max(255, \"physical address can set of between 2 and 255 characters!\")\r\n            .required(\"physical address is required\"),\r\n        businessLocationName: Yup.string()\r\n            .min(2, \"business location name can set of between 2 and 255 characters!\")\r\n            .max(255, \"business location name can set of between 2 and 255 characters!\")\r\n            .required(\"business location name is required\"),\r\n        email: Yup.string()\r\n            .email(\"email must be a valid email address\")\r\n            .required(\"email is required\"),\r\n        mobile: Yup.string()\r\n            .min(11, \"enter valid mobile number\")\r\n            .max(14, \"enter valid mobile number\")\r\n            .required(\"mobile is required\"),\r\n    });\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: \"\",\r\n            description: \"\",\r\n            physicalAddress: \"\",\r\n            businessLocationName: \"\",\r\n            email: \"\",\r\n            mobile: \"\"\r\n        },\r\n        validationSchema: completedSchema,\r\n        onSubmit: async (values, { resetForm, setFieldError, setSubmitting }) => {\r\n            const informationObj = {\r\n                businessId: BusinessId,\r\n                userId: UserId,\r\n                description: values.description,\r\n                businessName: values.name,\r\n                physicalAddress: values.physicalAddress,\r\n                longitude: longitudeData,\r\n                latitude: lattitudeData,\r\n                email: values.email,\r\n                mobile: \"+\" + values.mobile,\r\n                businessLocationName: values.businessLocationName\r\n            };\r\n\r\n            await addAddress(informationObj);\r\n            setSubmitting(false);\r\n        },\r\n    });\r\n\r\n    const { mutateAsync: addAddress } = useMutation(\r\n        async (data) => {\r\n            return await axiosPrivate.post(BUSINESS_API_URL.addBusinessAddress, JSON.stringify(data))\r\n        },\r\n        {\r\n            onSuccess: ({ data }) => {\r\n                enqueueSnackbar(\"business address add successfully\", {\r\n                    variant: \"success\",\r\n                    anchorOrigin: { vertical: \"top\", horizontal: \"right\" },\r\n                    autoHideDuration: 2000,\r\n                });\r\n                navigate(PATH_DASHBOARD.general.users);\r\n            },\r\n            onError: (error) => {\r\n                const errorData = error.response.data.errors;\r\n                if (error.response?.data?.message) {\r\n                    enqueueSnackbar(error.response?.data?.message, {\r\n                        variant: \"error\",\r\n                        anchorOrigin: { vertical: \"top\", horizontal: \"right\" },\r\n                        autoHideDuration: 2000,\r\n                    });\r\n                }\r\n                Object.keys(errorData).forEach((key) => {\r\n\r\n                    if (key === \"businessName\") {\r\n                        setFieldError(\"name\", errorData[key]);\r\n                    } else if (key === \"businessLocationName\") {\r\n                        setFieldError(\"businessLocationName\", errorData[key]);\r\n                    } else if (key === \"physicalAddress\") {\r\n                        setFieldError(\"physicalAddress\", errorData[key]);\r\n                    } else if (key === \"description\") {\r\n                        setFieldError(\"description\", errorData[key]);\r\n                    } else if (key === \"email\") {\r\n                        setFieldError(\"email\", errorData[key]);\r\n                    } else if (key === \"mobile\") {\r\n                        setFieldError(\"mobile\", errorData[key]);\r\n                    } else {\r\n                        setFieldError(key, errorData[key]);\r\n                    }\r\n                });\r\n            },\r\n        }\r\n    );\r\n\r\n    const { errors, touched, setFieldValue, handleSubmit, setFieldError, getFieldProps } = formik;\r\n    const onAutoCompleteIsLoad = (inputAutoComplete) => {\r\n        setAutoComplete(inputAutoComplete);\r\n    };\r\n    const handleChange = (event) => {\r\n        setAddressMapData(event.target.value);\r\n    };\r\n    const onAutoCompletePlaceIsChanged = () => {\r\n        if (autoComplete !== null) {\r\n            var place = autoComplete.getPlace();\r\n            location.lat = place.geometry.location.lat();\r\n            location.lng = place.geometry.location.lng();\r\n            location.address = place.vicinity;\r\n            setFieldValue('physicalAddress', place.vicinity)\r\n            setAddressMapData(place.vicinity);\r\n            setLongitudeData(location.lng);\r\n            setLattitudeData(location.lat);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormikProvider value={formik}>\r\n                <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className='col'>\r\n                                <div className='user_edit_header'>\r\n                                    <h4 className=\"app_text_14_semibold mb-0\">add business address</h4>\r\n                                </div>\r\n\r\n                                <div className=\"d-flex mt-4\">\r\n                                    <TextField\r\n                                        label=\"business name\"\r\n                                        varient=\"outlined\"\r\n                                        fullWidth\r\n                                        // disabled={true}\r\n                                        autoComplete=\"off\"\r\n                                        {...getFieldProps(\"name\")}\r\n                                        error={Boolean(touched.name && errors.name)}\r\n                                        helperText={touched.name && errors.name}\r\n                                    />\r\n                                </div>\r\n                                <div className='d-flex row mt-4'>\r\n                                    <div className='col'>\r\n                                        <Field\r\n                                            customeName=\"mobile\"\r\n                                            name=\"mobile\"\r\n                                            label=\"mobile number\"\r\n                                            errors={errors.mobile}\r\n                                            component={PhoneInputs}\r\n                                            data={\"\"}\r\n                                        />\r\n                                    </div>\r\n                                    <div className='col'>\r\n                                        <TextField\r\n                                            label='email'\r\n                                            type='email'\r\n                                            autoComplete='off'\r\n                                            fullWidth\r\n                                            variant='outlined'\r\n                                            {...getFieldProps(\"email\")}\r\n                                            error={Boolean(touched.email && errors.email)}\r\n                                            helperText={touched.email && errors.email}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className='d-flex row mt-4'>\r\n                                    <div className='col'>\r\n                                        <TextField\r\n                                            label='location name'\r\n                                            type='text'\r\n                                            autoComplete='off'\r\n                                            fullWidth\r\n                                            variant='outlined'\r\n                                            {...getFieldProps(\"businessLocationName\")}\r\n                                            error={Boolean(touched.businessLocationName && errors.businessLocationName)}\r\n                                            helperText={touched.businessLocationName && errors.businessLocationName}\r\n                                        />\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"d-flex mt-4\">\r\n                                    <TextField\r\n                                        label=\"description\"\r\n                                        varient=\"outlined\"\r\n                                        fullWidth\r\n                                        autoComplete=\"off\"\r\n                                        {...getFieldProps(\"description\")}\r\n                                        error={Boolean(touched.description && errors.description)}\r\n                                        helperText={touched.description && errors.description}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"d-flex mt-4 w-100\">\r\n                                    <LoadScript googleMapsApiKey={googleMapKey} libraries={libraries}>\r\n                                        <Autocomplete\r\n                                            className='w-100'\r\n                                            onLoad={onAutoCompleteIsLoad}\r\n                                            onPlaceChanged={onAutoCompletePlaceIsChanged}\r\n                                        >\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                defaultValue={addressMapData}\r\n                                                onChange={handleChange}\r\n                                                variant=\"outlined\"\r\n                                                label=\"physical address\"\r\n                                                {...getFieldProps(\"physicalAddress\")}\r\n                                                error={Boolean(touched.physicalAddress && errors.physicalAddress)}\r\n                                                helperText={touched.physicalAddress && errors.physicalAddress}\r\n                                            />\r\n                                        </Autocomplete>\r\n                                    </LoadScript>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <br></br>\r\n                        <div className=\"col\">\r\n                            <div className=\"col-md-8 m-auto\">\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    className=\"my-3 text-lowercase text-white app_bg_primary app_text_16_semibold app_btn_lg\"\r\n                                >\r\n                                    add business address\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            </FormikProvider></>\r\n    )\r\n}\r\n\r\nexport default BusinessAddressAdd"],"sourceRoot":""}