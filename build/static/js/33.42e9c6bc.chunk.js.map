{"version":3,"sources":["pages/dashboard/BusinessPermissions.jsx","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js"],"names":["Permissions","axiosPrivate","useAxiosPrivate","type","enqueueSnackbar","useSnackbar","navigate","useNavigate","formik","useFormik","initialValues","publicly","linked_user","with_beemz","not_shared","pic_visibility","status_visibility","post_visibility","accept_message_public","accept_message_phone","accept_marketing","onSubmit","values","setSubmitting","permissionObj","location","whileUsingApp","withLinkedContact","withPublic","notShared","visibility","picture","status","post","acceptMessage","public","contact","marketing","mutateAsync","useMutation","data","BUSINESS_API_URL","businessPermission","JSON","stringify","onSuccess","variant","anchorOrigin","vertical","horizontal","autoHideDuration","PATH_DASHBOARD","general","businessReferences","onError","error","errorData","response","message","handleSubmit","value","autoComplete","noValidate","className","sx","flexDirection","onChange","handleChange","name","control","checked","label","display","event","setFieldValue","textTransform","maxWidth","createSvgIcon","_jsx","d","getCheckboxUtilityClass","slot","generateUtilityClass","checkboxClasses","generateUtilityClasses","_excluded","CheckboxRoot","styled","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","overridesResolver","props","styles","ownerState","root","indeterminate","color","capitalize","theme","_extends","vars","palette","text","secondary","disableRipple","backgroundColor","action","activeChannel","primary","mainChannel","hoverOpacity","alpha","active","main","disabled","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","React","inProps","ref","_icon$props$fontSize","_indeterminateIcon$pr","useThemeProps","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","inputProps","size","other","_objectWithoutPropertiesLoose","classes","slots","composedClasses","composeClasses","useUtilityClasses","fontSize","clsx"],"mappings":"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","file":"static/js/33.42e9c6bc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Checkbox } from \"@mui/material\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\nimport { useMutation } from \"react-query\";\r\nimport { BUSINESS_API_URL } from \"src/api/axios\";\r\nimport { PATH_DASHBOARD } from \"src/routes/paths\";\r\nimport useAxiosPrivate from \"src/hooks/useAxiosPrivate\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst Permissions = () => {\r\n  const axiosPrivate = useAxiosPrivate({type:\"business\"});\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const navigate = useNavigate();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      publicly: false,\r\n      linked_user: false,\r\n      with_beemz: false,\r\n      not_shared: false,\r\n      pic_visibility: true,\r\n      status_visibility: false,\r\n      post_visibility: true,\r\n      accept_message_public: true,\r\n      accept_message_phone: true,\r\n      accept_marketing: true,\r\n    },\r\n    onSubmit: async (values, { setSubmitting }) => {\r\n      const permissionObj = {\r\n        location: {\r\n          whileUsingApp: values.with_beemz,\r\n          withLinkedContact: values.linked_user,\r\n          withPublic: values.publicly,\r\n          notShared: values.not_shared,\r\n        },\r\n        visibility: {\r\n          picture: values.pic_visibility,\r\n          status: values.status_visibility,\r\n          post: values.pic_visibility,\r\n        },\r\n        acceptMessage: {\r\n          public: values.accept_message_public,\r\n          contact: values.accept_message_phone,\r\n          marketing: values.accept_marketing,\r\n        },\r\n      };\r\n      mutateAsync(permissionObj);\r\n      setSubmitting(false);\r\n    },\r\n  });\r\n\r\n  const { mutateAsync } = useMutation(\r\n    async (data) => {\r\n      await axiosPrivate.post(\r\n        BUSINESS_API_URL.businessPermission,\r\n        JSON.stringify(data)\r\n      );\r\n    },\r\n    {\r\n      onSuccess: (data) => {\r\n        enqueueSnackbar(\"Business Permission settings Updated.\", {\r\n          variant: \"success\",\r\n          anchorOrigin: { vertical: \"top\", horizontal: \"right\" },\r\n          autoHideDuration: 2000,\r\n        });\r\n        navigate(PATH_DASHBOARD.general.businessReferences);\r\n      },\r\n      onError: (error) => {\r\n        const errorData = error.response.data.message;\r\n        enqueueSnackbar(errorData, {\r\n          variant: \"error\",\r\n          anchorOrigin: { vertical: \"top\", horizontal: \"right\" },\r\n          autoHideDuration: 2000,\r\n        });\r\n      },\r\n    }\r\n  );\r\n\r\n  const { handleSubmit } = formik;\r\n\r\n  return (\r\n    <>\r\n      <FormikProvider value={formik}>\r\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-11 col-xl-6\">\r\n                <h4 className=\"app_text_18_semibold\">\r\n                  Business permission settings\r\n                </h4>\r\n                <h4 className=\"app_text_16 app_text_gray\">\r\n                  what is shared/not shared\r\n                </h4>\r\n                <div className=\"row row-cols-1 g-4 mt-4\">\r\n                  <div className=\"col\">\r\n                    <h4 className=\"app_text_14_semibold app_text_black\">\r\n                      Location Sharing with?\r\n                    </h4>\r\n                    <FormGroup sx={{ flexDirection: \"row\" }}>\r\n                      <FormControlLabel\r\n                        onChange={formik.handleChange}\r\n                        name=\"publicly\"\r\n                        control={\r\n                          <Checkbox checked={formik.values.publicly === true} />\r\n                        }\r\n                        className=\"me-4 app_text_gray\"\r\n                        label=\"Publicly\"\r\n                      />\r\n                      <FormControlLabel\r\n                        onChange={formik.handleChange}\r\n                        name=\"linked_user\"\r\n                        control={\r\n                          <Checkbox\r\n                            checked={formik.values.linked_user === true}\r\n                          />\r\n                        }\r\n                        className=\"me-4 app_text_gray\"\r\n                        label=\"Linked Users\"\r\n                      />\r\n                      <FormControlLabel\r\n                        onChange={formik.handleChange}\r\n                        name=\"with_beemz\"\r\n                        control={\r\n                          <Checkbox\r\n                            checked={formik.values.with_beemz === true}\r\n                          />\r\n                        }\r\n                        className=\"me-4 app_text_gray\"\r\n                        label=\"With Beemz\"\r\n                      />\r\n                      <FormControlLabel\r\n                        onChange={formik.handleChange}\r\n                        name=\"not_shared\"\r\n                        control={\r\n                          <Checkbox\r\n                            checked={formik.values.not_shared === true}\r\n                          />\r\n                        }\r\n                        className=\"me-4 app_text_gray\"\r\n                        label=\"Not Shared\"\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <div className=\"col-12\">\r\n                      <h4 className=\"app_text_14_semibold app_text_black\">\r\n                        Pic visibility to the public?\r\n                      </h4>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <FormControl>\r\n                        <RadioGroup\r\n                          name=\"pic-visibility\"\r\n                          sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                        >\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\"pic_visibility\", true);\r\n                            }}\r\n                            name=\"pic_visibility\"\r\n                            control={\r\n                              <Radio\r\n                                checked={formik.values.pic_visibility === true}\r\n                              />\r\n                            }\r\n                            className=\"app_text_gray\"\r\n                            label=\"Yes\"\r\n                          />\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\"pic_visibility\", false);\r\n                            }}\r\n                            name=\"pic_visibility\"\r\n                            control={\r\n                              <Radio\r\n                                checked={formik.values.pic_visibility === false}\r\n                              />\r\n                            }\r\n                            className=\"ms-3 app_text_gray\"\r\n                            label=\"No\"\r\n                          />\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <div className=\"col-12\">\r\n                      <h4 className=\"app_text_14_semibold app_text_black\">\r\n                        Status visibility to the public?\r\n                      </h4>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <FormControl>\r\n                        <RadioGroup\r\n                          name=\"status-visibility\"\r\n                          sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                        >\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\"status_visibility\", true);\r\n                            }}\r\n                            name=\"status_visibility\"\r\n                            control={\r\n                              <Radio\r\n                                checked={\r\n                                  formik.values.status_visibility === true\r\n                                }\r\n                              />\r\n                            }\r\n                            className=\"app_text_gray\"\r\n                            label=\"Yes\"\r\n                          />\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\"status_visibility\", false);\r\n                            }}\r\n                            name=\"status_visibility\"\r\n                            control={\r\n                              <Radio\r\n                                checked={\r\n                                  formik.values.status_visibility === false\r\n                                }\r\n                              />\r\n                            }\r\n                            className=\"ms-3 app_text_gray\"\r\n                            label=\"No\"\r\n                          />\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <div className=\"col-12\">\r\n                      <h4 className=\"app_text_14_semibold app_text_black\">\r\n                        Posts visibility to the public?\r\n                      </h4>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <FormControl>\r\n                        <RadioGroup\r\n                          name=\"post-visibility\"\r\n                          sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                        >\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\"post_visibility\", true);\r\n                            }}\r\n                            name=\"post_visibility\"\r\n                            control={\r\n                              <Radio\r\n                                checked={formik.values.post_visibility === true}\r\n                              />\r\n                            }\r\n                            className=\"app_text_gray\"\r\n                            label=\"Yes\"\r\n                          />\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\"post_visibility\", false);\r\n                            }}\r\n                            name=\"post_visibility\"\r\n                            control={\r\n                              <Radio\r\n                                checked={\r\n                                  formik.values.post_visibility === false\r\n                                }\r\n                              />\r\n                            }\r\n                            className=\"ms-3 app_text_gray\"\r\n                            label=\"No\"\r\n                          />\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <div className=\"col-12\">\r\n                      <h4 className=\"app_text_14_semibold app_text_black\">\r\n                        Accept chats/messages from public/unknown users?\r\n                      </h4>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <FormControl>\r\n                        <RadioGroup\r\n                          name=\"chat-permission\"\r\n                          sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                        >\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\r\n                                \"accept_message_public\",\r\n                                true\r\n                              );\r\n                            }}\r\n                            name=\"accept_message_public\"\r\n                            control={\r\n                              <Radio\r\n                                checked={\r\n                                  formik.values.accept_message_public === true\r\n                                }\r\n                              />\r\n                            }\r\n                            className=\"app_text_gray\"\r\n                            label=\"Yes\"\r\n                          />\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\r\n                                \"accept_message_public\",\r\n                                false\r\n                              );\r\n                            }}\r\n                            name=\"accept_message_public\"\r\n                            control={\r\n                              <Radio\r\n                                checked={\r\n                                  formik.values.accept_message_public === false\r\n                                }\r\n                              />\r\n                            }\r\n                            className=\"ms-3 app_text_gray\"\r\n                            label=\"No\"\r\n                          />\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <div className=\"col-12\">\r\n                      <h4 className=\"app_text_14_semibold app_text_black\">\r\n                        Accept chats/messages from users on their phone contact\r\n                        list?\r\n                      </h4>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <FormControl>\r\n                        <RadioGroup\r\n                          name=\"chat-from-contact-permission\"\r\n                          sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                        >\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\r\n                                \"accept_message_phone\",\r\n                                true\r\n                              );\r\n                            }}\r\n                            name=\"accept_message_phone\"\r\n                            control={\r\n                              <Radio\r\n                                checked={\r\n                                  formik.values.accept_message_phone === true\r\n                                }\r\n                              />\r\n                            }\r\n                            className=\"app_text_gray\"\r\n                            label=\"Yes\"\r\n                          />\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\r\n                                \"accept_message_phone\",\r\n                                false\r\n                              );\r\n                            }}\r\n                            name=\"accept_message_phone\"\r\n                            control={\r\n                              <Radio\r\n                                checked={\r\n                                  formik.values.accept_message_phone === false\r\n                                }\r\n                              />\r\n                            }\r\n                            className=\"ms-3 app_text_gray\"\r\n                            label=\"No\"\r\n                          />\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <div className=\"col-12\">\r\n                      <h4 className=\"app_text_14_semibold app_text_black\">\r\n                        Accept all marketing and 3rd party advertisements?\r\n                      </h4>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <FormControl>\r\n                        <RadioGroup\r\n                          name=\"ad-permission\"\r\n                          sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                        >\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\"accept_marketing\", true);\r\n                            }}\r\n                            name=\"accept_marketing\"\r\n                            control={\r\n                              <Radio\r\n                                checked={\r\n                                  formik.values.accept_marketing === true\r\n                                }\r\n                              />\r\n                            }\r\n                            className=\"app_text_gray\"\r\n                            label=\"Yes\"\r\n                          />\r\n                          <FormControlLabel\r\n                            onChange={(event) => {\r\n                              formik.setFieldValue(\"accept_marketing\", false);\r\n                            }}\r\n                            name=\"accept_marketing\"\r\n                            control={\r\n                              <Radio\r\n                                checked={\r\n                                  formik.values.accept_marketing === false\r\n                                }\r\n                              />\r\n                            }\r\n                            className=\"ms-3 app_text_gray\"\r\n                            label=\"No\"\r\n                          />\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <Button\r\n                  type=\"submit\"\r\n                  className=\"mt-5 app_btn_lg app_bg_primary app_text_16_semibold\"\r\n                  sx={{ textTransform: \"none\", maxWidth: \"550px\" }}\r\n                  variant=\"contained\"\r\n                >\r\n                  Save Changes\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      </FormikProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Permissions;\r\n","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary']);\nexport default checkboxClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;"],"sourceRoot":""}